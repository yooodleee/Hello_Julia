# 캡슐화

function square(t)
    for i in 1:4
        forward(t, 100)
        turn(t, -90)
    end
end

🐢 = Turtle()
@svg begin
    square(🐢)
end

"""
위에서 가장 안쪽에 있는 문장 forward와 turn은 들여쓰기가 적용되어 있다. 이는 그 문장들이 함수 정의 안에 
있는 for 루프 안에 있다는 것을 명시한다. 함수 내부에서 t는 인자로 넘겨진 거북이를 가리킨다. 그리므로
turn(t, -90)은 turn(turtle, -90)과 같은 작용을 한다. 그렇다면 도대체 왜 turn 함수를 호출할 때 거북이를 
쓰지 않고 t를 쓴 것일까? 여기에는 t가 거북이 뿐만 아니라 아무 거북이나 될 수 있다는 생각이 기저에 깔려 있다.
즉 다음 코드처럼 새로운 거북이를 만들어서 square 함수의 인수로 넘길 수도 있다.
"""

🐫 = Turtle()
@svg begin
    square(🐫)
end

"""
이렇게 코드를 함수의 형태로 감싸는 것을 캡슐화(encapsulation)라고 한다. 캡슐화의 한 가지 이점은 해당 코드가 
이름을 가지게 됨으로서, 일종의 문서화가 된다는 것이다. 또 다른 이점은 코드를 재사용할 때, 복사해서 붙여넣는
것보다 함수를 한 번 더 호출하는 것이 훨씬 더 간결하다는 점이다.
"""